version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: 65050816/backend:latest
    ports:
      - "5001:5001"
    networks:
      - app-network
    depends_on:
      database:
        condition: service_healthy
    restart: always
    env_file:
      - ./backend/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: 65050816/frontend:latest
    ports:
      - "3000:80"
    networks:
      - app-network
    env_file:
      - ./frontend/.env
    depends_on:
      backend:
        condition: service_healthy
  
  test:
    build:
      context: ./test
      dockerfile: Dockerfile
    image: 65050816/test:latest
    ports:
      - "8080:8080"
    networks:
      - app-network
    env_file:
      - ./test/env.yaml
    depends_on:
      backend:
        condition: service_healthy

  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    image: 65050816/database:latest
    ports:
      - "3307:3306"  # Map host port 3306 to container port 3307
    volumes:
      - db_data:/var/lib/mysql  # Persist MySQL data
      - ./backend/database/sql/testMoviesScript.sql:/docker-entrypoint-initdb.d/testMoviesScript.sql:ro  # Mount SQL script for initialization
    environment:
      MYSQL_ROOT_PASSWORD: 1234567890  # Set MySQL root password
      MYSQL_DATABASE: MADSS  # Create a database named MADSS
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"  # Do not allow empty password
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-p1234567890"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
